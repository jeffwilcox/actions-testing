#
# Build authorized pull requests, creating a compressed content tgz
# with the generated site, storing it as an artifact.
#
name: Consider building pull request content
on:
  pull_request: # considered pull_request_target, not needed
    types: [opened]
  pull_request_review:
    types: [submitted, edited]
  pull_request_review_comment:
    types: [created, edited]
jobs:
  isAuthorized:
    name: "Check if this PR has been approved for build by a maintainer"
    runs-on: ubuntu-latest
    steps:
    #       actions/checkout@v2
    - uses: actions/checkout@2036a08e25fa78bbd946711a407b529a0a1204bf
    #       actions/github-script@v2
    - uses: actions/github-script@44b873bc975058192f5279ebe7579496381f575d
      name: "Authorization checks"
      id: authorize
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        result-encoding: string
        script: |
          const authorizationCheck = require(`${process.env.GITHUB_WORKSPACE}/.github/workflows/authorizationCheck.js`)
          const output = await authorizationCheck({github, context});
          const authorized = output && output.authorized === true ? 'authorized-writer' : 'NO';
          return authorized;
    - name: "Associated Git SHA"
      if: github.sha
      run: echo The associated Git event SHA is $GITHUB_SHA
    - name: "No action required"
      if: ${{ steps.authorize.outputs.result != 'authorized-writer' }}
      run: |
        echo No further action necessary or approved at this time.
    - name: "Approval for build"
      if: ${{ steps.authorize.outputs.result == 'authorized-writer' }}
      run: |
        echo Authorized to go do things.
    - name: "Approval for build #Z"
      if: ${{ steps.authorize.outputs.result == 'authorized-writer' }}
      run: |
        echo Authorized to go do things.
    - name: "Approval for build #2"
      if: ${{ steps.authorize.outputs.result == 'authorized-writer' }}
      run: |
        echo Authorized to go do things.
    - name: Show result
      run: echo "${{steps.authorize.outputs.result}}"
    outputs:
      isMaintainerApproved: ${{ steps.authorize.outputs.result }}
  ternary:
    runs-on: ubuntu-latest
    steps:
    - name: official build or not
      id: officialbuild
      run: |
        if [$REPOFULLNAME == 'opensource.microsoft.com']
        then
            echo "::set-output name=isofficial::true"
        else
            echo "::set-output name=isofficial::false"
        fi
      env:
        REPOFULLNAME: ${{ github.repository }}
    - name: outputIsOfficial
      env:
        BUILDTYPEX: ${{ steps.officialbuild.outputs.isofficial }}
      run: echo $BUILDTYPEX
  stage:
    name: "Build content"
    needs: isAuthorized
    if: ${{ needs.isAuthorized.outputs.isMaintainerApproved == 'authorized-writer' }}
    runs-on: ubuntu-latest
    steps:
    - name: "Something"
      run: echo Hello.
  debugger:
    needs: isAuthorized
    runs-on: ubuntu-latest
    steps:
    - name: Dump some stuff
      env:
        MATRIX_CONTEXT: ${{ toJson(needs.isAuthorized.outputs) }}
      run: echo "$MATRIX_CONTEXT"